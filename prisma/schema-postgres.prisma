// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/postgres"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// Shared

model User {
  id                  String               @id @default(uuid())
  username            String
  password            String
  email               String               @default("")
  name                String               @default("")
  isAdmin             Boolean              @default(false)
  phoneNumber         String               @default("")
  address             Address[]
  waterPredictions    WaterPrediction[]
  waterSources        WaterSource[]
  waterSourcesLikes   WaterSourcesLike[]
  articles            Article[]
  gamifcationStats    GamifcationStat[]
  userBadges          UserBadge[]
  waterSourceComments WaterSourceComment[]
}

model Address {
  id           String        @id @default(uuid())
  longitude    DateTime
  latitude     DateTime
  country      String
  province     String
  city         String
  district     String
  village      String
  address      String
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?
  waterSources WaterSource[]
}

// Deteksi Kejernihan Air

model WaterPrediction {
  id          String   @id @default(uuid())
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?
  imageUrl    String
  prediction  Float
  dateCreated DateTime @default(now())
}

// Geolocation of Water Sources and Quantities

model WaterSource {
  id                  String               @id @default(uuid())
  author              User?                @relation(fields: [authorId], references: [id])
  authorId            String?
  dateCreated         DateTime             @default(now())
  dateModified        DateTime             @default(now())
  address             Address              @relation(fields: [addressId], references: [id])
  description         String               @default("")
  state               String
  addressId           String
  waterSourceLikes    WaterSourcesLike[]
  waterSourceComments WaterSourceComment[]
}

model WaterSourcesLike {
  waterSource   WaterSource @relation(fields: [waterSourceId], references: [id])
  waterSourceId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String

  @@id([waterSourceId, userId])
}

model WaterSourceComment {
  id            String      @id @default(uuid())
  author        User?       @relation(fields: [authorId], references: [id])
  authorId      String?
  dateCreated   DateTime    @default(now())
  dateModified  DateTime    @default(now())
  content       String
  waterSource   WaterSource @relation(fields: [waterSourceId], references: [id])
  waterSourceId String
}

// Articles (Berita)

model Article {
  id            String   @id @default(uuid())
  author        User?    @relation(fields: [authorId], references: [id])
  authorId      String?
  dateCreated   DateTime @default(now())
  dateModified  DateTime @default(now())
  title         String   @default("")
  content       String   @default("")
  coverImageUrl String?
}

// Simple E-Commerce

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  imageUrl    String
  category    String
  dateCreated DateTime @default(now())
  url         String
}

// Gamification

model GamifcationStat {
  user   User?  @relation(fields: [userId], references: [id])
  userId String @id
}

model Badges {
  id          String      @id @default(uuid())
  name        String
  description String
  imageUrl    String
  userBadges  UserBadge[]
}

model UserBadge {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  badge   Badges @relation(fields: [badgeId], references: [id])
  badgeId String

  @@id([userId, badgeId])
}
